// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateZoneHandlerFunc turns a function with the right signature into a create zone handler
type CreateZoneHandlerFunc func(CreateZoneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateZoneHandlerFunc) Handle(params CreateZoneParams) middleware.Responder {
	return fn(params)
}

// CreateZoneHandler interface for that can handle valid create zone params
type CreateZoneHandler interface {
	Handle(CreateZoneParams) middleware.Responder
}

// NewCreateZone creates a new http.Handler for the create zone operation
func NewCreateZone(ctx *middleware.Context, handler CreateZoneHandler) *CreateZone {
	return &CreateZone{Context: ctx, Handler: handler}
}

/*CreateZone swagger:route POST /zones zone createZone

Create a new zone in the k9 server

Create a new zone

*/
type CreateZone struct {
	Context *middleware.Context
	Handler CreateZoneHandler
}

func (o *CreateZone) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateZoneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
